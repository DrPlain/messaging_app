name: Django CI with MySQL and Code Quality

on:
  push:
    branches:
      - master # You can change this to the branch you want to trigger the workflow
  pull_request:
    branches:
      - master # This will trigger the workflow for PRs targeting the main branch

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:9.2
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.MYSQL_DB }}
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent" --health-start-period=30s

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.11" # Use the Python version that your app requires

      - name: Install dependencies
        run: |
          python3 -m venv .venv
          source .venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install Code Quality Tools
        run: |
          source .venv/bin/activate
          pip install flake8 coverage

      - name: Run Flake8 Linting
        run: |
          source .venv/bin/activate
          flake8 chats/*.py messaging_app/*.py --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Load Environment Variables
        run: |
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> $GITHUB_ENV
          echo "ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }}" >> $GITHUB_ENV

      - name: Create .env file
        run: |
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" > .env
          echo "ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }}" > .env

      - name: Wait for MySQL to start
        run: |
          sleep 30  # Wait for MySQL to be fully ready
          mysql -h 127.0.0.1 -u root -p${{ secrets.MYSQL_ROOT_PASSWORD }} -e "GRANT ALL PRIVILEGES ON *.* TO '${{ secrets.MYSQL_USER }}'@'%';"
          mysql -h 127.0.0.1 -u root -p${{ secrets.MYSQL_ROOT_PASSWORD }} -e "FLUSH PRIVILEGES;"

      - name: Run Django tests
        run: |
          source .venv/bin/activate
          python manage.py test  # Run the Django tests
        env:
          MYSQL_HOST: 127.0.0.1
          MYSQL_PORT: 3306
          MYSQL_DB: ${{ secrets.MYSQL_DB }}
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
          DB_ENGINE: django.db.backends.mysql
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          ALLOWED_HOSTS: ${{ secrets.ALLOWED_HOSTS }}

      - name: Upload test results
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: test-report
          path: test-reports/ # Ensure that your test reports are saved in this directory
